
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.numeric_std.all;


entity rgb_generator is
    Port ( Din 	: in	STD_LOGIC_VECTOR (11 downto 0);			-- niveau de gris du pixels sur 8 bits
           Din_ori: in	STD_LOGIC_VECTOR (11 downto 0);	
           realtime: in STD_LOGIC;
           mode : in STD_LOGIC_VECTOR (2 downto 0);
		   Nblank : in	STD_LOGIC;										-- signal indique les zone d'affichage, hors la zone d'affichage
		   x: in STD_LOGIC_VECTOR(9 downto 0);
		   y: in STD_LOGIC_VECTOR(9 downto 0);																	-- les trois couleurs prendre 0
           R,G,B 	: out	STD_LOGIC_VECTOR (3 downto 0));			-- les trois couleurs sur 10 bits
end rgb_generator;

architecture Behavioral of rgb_generator is
signal y_in,x_in: STD_LOGIC_VECTOR(9 downto 0);
signal rgb: STD_LOGIC_VECTOR(11 downto 0);
--mode1
constant X_start1: std_logic_vector(9 downto 0):= "0100010010";--274
constant Y_start1:std_logic_vector(9 downto 0):= "0000111100";--60;
constant X_end1: std_logic_vector(9 downto 0) := "0101110001";--369;
constant Y_end1:std_logic_vector(9 downto 0):="0001001100"; --76;
--mode2
constant X_start2: std_logic_vector(9 downto 0):= "0011011000";--216
constant Y_start2:std_logic_vector(9 downto 0):= "0000111100";--60;
constant X_end2: std_logic_vector(9 downto 0) := "0110100111";--423;
constant Y_end2:std_logic_vector(9 downto 0):="0001001100"; --76;
--mode3
constant X_start3: std_logic_vector(9 downto 0):= "0011011000";--216
constant Y_start3:std_logic_vector(9 downto 0):= "0000111100";--60;
constant X_end3: std_logic_vector(9 downto 0) := "0110100111";--423;
constant Y_end3:std_logic_vector(9 downto 0):="0001001100"; --76;
--mode4
constant X_start4: std_logic_vector(9 downto 0):= "0100000000";--256
constant Y_start4:std_logic_vector(9 downto 0):= "0000111100";--60;
constant X_end4: std_logic_vector(9 downto 0) := "0101111111";--383;
constant Y_end4:std_logic_vector(9 downto 0):="0001001100"; --76;
--mode5
constant X_start5: std_logic_vector(9 downto 0):= "0011010000";--208
constant Y_start5:std_logic_vector(9 downto 0):= "0000111100";--60;
constant X_end5: std_logic_vector(9 downto 0) := "0110101111";--431;
constant Y_end5:std_logic_vector(9 downto 0):="0001001100"; --76;
--mode6
constant X_start6: std_logic_vector(9 downto 0):= "0011000000";--192
constant Y_start6:std_logic_vector(9 downto 0):= "0000111100";--60;
constant X_end6: std_logic_vector(9 downto 0) := "0110111111";--447;
constant Y_end6:std_logic_vector(9 downto 0):="0001001100"; --76;
--mode7
constant X_start7: std_logic_vector(9 downto 0):= "0011001000";--200
constant Y_start7:std_logic_vector(9 downto 0):= "0000111100";--60;
constant X_end7: std_logic_vector(9 downto 0) := "0110110111";--439;
constant Y_end7:std_logic_vector(9 downto 0):="0001001100"; --76;
--mode8
constant X_start8: std_logic_vector(9 downto 0):= "0010111000";--184
constant Y_start8:std_logic_vector(9 downto 0):= "0000111100";--60;
constant X_end8: std_logic_vector(9 downto 0) := "0111000111";--455;
constant Y_end8:std_logic_vector(9 downto 0):="0001001100"; --76;

constant X_left: std_logic_vector(9 downto 0):= "0000111100";--60
constant Y_up:std_logic_vector(9 downto 0):= "0001010101";--85;
constant X_right: std_logic_vector(9 downto 0) := "1001000100";--580;
constant Y_down:std_logic_vector(9 downto 0):="0111000010"; --450;

constant X_left1: std_logic_vector(9 downto 0):= "0000111100";--60
constant X_right1: std_logic_vector(9 downto 0) := "0100000100";--260
constant Y_up1:std_logic_vector(9 downto 0):= "0010001100";--140;
constant Y_down1:std_logic_vector(9 downto 0):="0101010100";--340

constant X_left2: std_logic_vector(9 downto 0):= "0101111100";--380
constant X_right2: std_logic_vector(9 downto 0) := "1001000100";--580
constant Y_up2:std_logic_vector(9 downto 0):= "0010001100";--140;
constant Y_down2:std_logic_vector(9 downto 0):="0101010100";--340
type romType1 is array (0 to 15) of std_logic_vector (0 to 95);
constant originrom : romType1 :=(
 0=>X"000000000000000000000000", 1=>X"000000000000000000000000", 
 2=>X"000000000000000000000000", 3=>X"3800fc007c003c007c00c700", 
 4=>X"440042001000440010006200", 5=>X"820042001000440010006200",
 6=>X"820042001000800010005200", 7=>X"82007c001000800010005200",
 8=>X"820048001000800010004a00", 9=>X"8200480010008e0010004a00",
 10=>X"820044001000840010004a00", 11=>X"820044001000440010004600", 
 12=>X"440042001000440010004600", 13=>X"3800e3007c0038007c00e200", 
 14=>X"000000000000000000000000", 15=>X"000000000000000000000000"
 );
 type romType2 is array (0 to 15) of std_logic_vector (0 to 207);
 constant blackrom : romType2:=(
 0=>X"0000000000000000000000000000000000000000000000000000", 1=>X"0000000000000000000000000000000000000000000000000000", 
 2=>X"0000000000000000000000000000000000000000000000000000", 3=>X"f800e00010003e00ee00000030000000d600e7007c00fe00fc00", 
 4=>X"4400400010004200440000004800000054004200100092004200", 5=>X"4400400018004200480000004800000054004200100010004800",
 6=>X"4400400028008000500000004800000054004200100010004800", 7=>X"7800400028008000700000005000000054004200100010007800",
 8=>X"4400400024008000500000006e00000054007e00100010004800", 9=>X"420040003c00800048000000a40000006c004200100010004800",
 10=>X"4200400044008000480000009400000028004200100010004000", 11=>X"4200400042004200440000009800000028004200100010004200", 
 12=>X"4400420042004400440000008900000028004200100010004200", 13=>X"f800fe00e7003800ee000000760000002800e7007c003800fc00", 
 14=>X"0000000000000000000000000000000000000000000000000000", 15=>X"0000000000000000000000000000000000000000000000000000"
 );
 type romType3 is array (0 to 15) of std_logic_vector (0 to 207);
 constant gaussianrom : romType3:=(
 0=>X"0000000000000000000000000000000000000000000000000000", 1=>X"0000000000000000000000000000000000000000000000000000", 
 2=>X"0000000000000000000000000000000000000000000000000000", 3=>X"3c001000e7003e003e007c001000c7000000f800e000e700fc00", 
 4=>X"4400100042004200420010001000620000004400400042004200", 5=>X"4400180042004200420010001800620000004400400042004200",
 6=>X"8000280042004000400010002800520000004400400042004200", 7=>X"8000280042002000200010002800520000007800400042007c00",
 8=>X"80002400420018001800100024004a0000004400400042004800", 9=>X"8e003c0042000400040010003c004a0000004200400042004800",
 10=>X"84004400420002000200100044004a0000004200400042004400", 11=>X"4400420042004200420010004200460000004200400042004400", 
 12=>X"4400420042004200420010004200460000004400420042004200", 13=>X"3800e7003c007c007c007c00e700e2000000f800fe003c00e300", 
 14=>X"0000000000000000000000000000000000000000000000000000", 15=>X"0000000000000000000000000000000000000000000000000000"
 ); 
 type romType4 is array (0 to 15) of std_logic_vector (0 to 127);
 constant boxrom : romType4:=(
 0=>X"00000000000000000000000000000000", 1=>X"00000000000000000000000000000000", 
 2=>X"00000000000000000000000000000000", 3=>X"f8003800e7000000f800e700e000fc00", 
 4=>X"44004400420000004400420040004200", 5=>X"44008200240000004400420040004200",
 6=>X"44008200240000004400420040004200", 7=>X"78008200180000007800420040007c00",
 8=>X"44008200180000004400420040004800", 9=>X"42008200180000004200420040004800",
 10=>X"42008200240000004200420040004400", 11=>X"42008200240000004200420040004400", 
 12=>X"44004400420000004400420042004200", 13=>X"f8003800e7000000f8003c00fe00e300", 
 14=>X"00000000000000000000000000000000", 15=>X"00000000000000000000000000000000"
 ); 
 
  type romType5 is array (0 to 15) of std_logic_vector (0 to 223);
 constant invertrom : romType5:=(
 0=>X"00000000000000000000000000000000000000000000000000000000", 1=>X"00000000000000000000000000000000000000000000000000000000", 
 2=>X"00000000000000000000000000000000000000000000000000000000", 3=>X"7c00c700e700fc00fc00fe00fc00f80000003e003800e0003800fc00", 
 4=>X"10006200420042004200920042004400000042004400400044004200", 5=>X"10006200420048004200100048004200000042008200400082004200",
 6=>X"10005200440048004200100048004200000080008200400082004200", 7=>X"10005200240078007c00100078004200000080008200400082007c00",
 8=>X"10004a00240048004800100048004200000080008200400082004800", 9=>X"10004a00280048004800100048004200000080008200400082004800",
 10=>X"10004a00280040004400100040004200000080008200400082004400", 11=>X"10004600180042004400100042004200000042008200400082004400", 
 12=>X"10004600100042004200100042004400000044004400420044004200", 13=>X"7c00e2001000fc00e3003800fc00f800000038003800fe003800e300", 
 14=>X"00000000000000000000000000000000000000000000000000000000", 15=>X"00000000000000000000000000000000000000000000000000000000"
 ); 
 
 type romType6 is array (0 to 15) of std_logic_vector (0 to 255);
 constant swaprgrom : romType6:=(
 0=>X"0000000000000000000000000000000000000000000000000000000000000000", 1=>X"0000000000000000000000000000000000000000000000000000000000000000", 
 2=>X"0000000000000000000000000000000000000000000000000000000000000000", 3=>X"3e00d6001000fc000000fc00fc00f8000000300000003c00fc00fc00fc00c700", 
 4=>X"4200540010004200000042004200440000004800000044004200420042006200", 5=>X"4200540018004200000042004800420000004800000044004200480048006200",
 6=>X"4000540028004200000042004800420000004800000080004200480048005200", 7=>X"200054002800420000007c007800420000005000000080007c00780078005200",
 8=>X"1800540024007c00000048004800420000006e00000080004800480048004a00", 9=>X"04006c003c00400000004800480042000000a40000008e004800480048004a00",
 10=>X"0200280044004000000044004000420000009400000084004400400040004a00", 11=>X"4200280042004000000044004200420000009800000044004400420042004600", 
 12=>X"4200280042004000000042004200440000008900000044004200420042004600", 13=>X"7c002800e700e0000000e300fc00f8000000760000003800e300fc00fc00e200", 
 14=>X"0000000000000000000000000000000000000000000000000000000000000000", 15=>X"0000000000000000000000000000000000000000000000000000000000000000"
 ); 
 
 type romType7 is array (0 to 15) of std_logic_vector (0 to 239);
 constant swaprbrom : romType7:=(
 0=>X"000000000000000000000000000000000000000000000000000000000000", 1=>X"000000000000000000000000000000000000000000000000000000000000", 
 2=>X"000000000000000000000000000000000000000000000000000000000000", 3=>X"3e00d6001000fc000000fc00fc00f800000030000000f800e000e700fc00", 
 4=>X"420054001000420000004200420044000000480000004400400042004200", 5=>X"420054001800420000004200480042000000480000004400400042004800",
 6=>X"400054002800420000004200480042000000480000004400400042004800", 7=>X"200054002800420000007c00780042000000500000007800400042007800",
 8=>X"1800540024007c00000048004800420000006e0000004400400042004800", 9=>X"04006c003c00400000004800480042000000a40000004200400042004800",
 10=>X"020028004400400000004400400042000000940000004200400042004000", 11=>X"420028004200400000004400420042000000980000004200400042004200", 
 12=>X"420028004200400000004200420044000000890000004400420042004200", 13=>X"7c002800e700e0000000e300fc00f800000076000000f800fe003c00fc00", 
 14=>X"000000000000000000000000000000000000000000000000000000000000", 15=>X"000000000000000000000000000000000000000000000000000000000000"
 ); 
 
  type romType8 is array (0 to 15) of std_logic_vector (0 to 271);
 constant swapgbrom : romType8:=(
 0=>X"00000000000000000000000000000000000000000000000000000000000000000000", 1=>X"00000000000000000000000000000000000000000000000000000000000000000000", 
 2=>X"00000000000000000000000000000000000000000000000000000000000000000000", 3=>X"3e00d6001000fc0000003c00fc00fc00fc00c700000030000000f800e000e700fc00", 
 4=>X"42005400100042000000440042004200420062000000480000004400400042004200", 5=>X"42005400180042000000440042004800480062000000480000004400400042004800",
 6=>X"40005400280042000000800042004800480052000000480000004400400042004800", 7=>X"2000540028004200000080007c007800780052000000500000007800400042007800",
 8=>X"1800540024007c00000080004800480048004a0000006e0000004400400042004800", 9=>X"04006c003c00400000008e004800480048004a000000a40000004200400042004800",
 10=>X"0200280044004000000084004400400040004a000000940000004200400042004000", 11=>X"42002800420040000000440044004200420046000000980000004200400042004200", 
 12=>X"42002800420040000000440042004200420046000000890000004400420042004200", 13=>X"7c002800e700e00000003800e300fc00fc00e200000076000000f800fe003c00fc00", 
 14=>X"00000000000000000000000000000000000000000000000000000000000000000000", 15=>X"00000000000000000000000000000000000000000000000000000000000000000000"
 ); 
begin
        y_in<=y;
        x_in<=x;
        R<=rgb(11 downto 8);
        G<=rgb(7 downto 4);
        B<=rgb(3 downto 0);
		rgb <= "111111111111" when mode="000" and Nblank='1' and x_in>=X_start1 and x_in< X_end1 and y_in>=y_start1 and y_in<y_end1 and originrom(TO_INTEGER(unsigned(y_in-Y_start1)))(TO_INTEGER(unsigned(x_in-x_start1)))='1' else
		       "111111111111" when mode="001" and Nblank='1' and x_in>=X_start2 and x_in< X_end2 and y_in>=y_start2 and y_in<y_end2 and blackrom(TO_INTEGER(unsigned(y_in-Y_start2)))(TO_INTEGER(unsigned(x_in-x_start2)))='1' else
--		       "111111111111" when mode="010" and Nblank='1' and x_in>=X_start3 and x_in< X_end3 and y_in>=y_start3 and y_in<y_end3 and gaussianrom(TO_INTEGER(unsigned(y_in-Y_start3)))(TO_INTEGER(unsigned(x_in-x_start3)))='1' else
--		       "111111111111" when mode="011" and Nblank='1' and x_in>=X_start4 and x_in< X_end4 and y_in>=y_start4 and y_in<y_end4 and boxrom(TO_INTEGER(unsigned(y_in-Y_start4)))(TO_INTEGER(unsigned(x_in-x_start4)))='1' else
		       "111111111111" when mode="011" and Nblank='1' and x_in>=X_start5 and x_in< X_end5 and y_in>=y_start5 and y_in<y_end5 and invertrom(TO_INTEGER(unsigned(y_in-Y_start5)))(TO_INTEGER(unsigned(x_in-x_start5)))='1' else
		       "111111111111" when mode="111" and Nblank='1' and x_in>=X_start6 and x_in< X_end6 and y_in>=y_start6 and y_in<y_end6 and swaprgrom(TO_INTEGER(unsigned(y_in-Y_start6)))(TO_INTEGER(unsigned(x_in-x_start6)))='1' else
		       "111111111111" when mode="110" and Nblank='1' and x_in>=X_start7 and x_in< X_end7 and y_in>=y_start7 and y_in<y_end7 and swaprbrom(TO_INTEGER(unsigned(y_in-Y_start7)))(TO_INTEGER(unsigned(x_in-x_start7)))='1' else
		       "111111111111" when mode="010" and Nblank='1' and x_in>=X_start8 and x_in< X_end8 and y_in>=y_start8 and y_in<y_end8 and swapgbrom(TO_INTEGER(unsigned(y_in-Y_start8)))(TO_INTEGER(unsigned(x_in-x_start8)))='1' else
		       din  when realtime='1' and Nblank='1' and x_in>=X_left and x_in<=X_right and y_in>=y_up  and y_in<y_down else 
		       din_ori  when realtime='0' and Nblank='1' and x_in>=X_left1 and x_in<=X_right1 and y_in>=y_up1  and y_in<y_down1 else 
               din when realtime='0' and Nblank='1' and x_in>=X_left2 and x_in<=X_right2 and y_in>=y_up2  and y_in<y_down2 else 
		      "101101100010" when  mode="000" and Nblank='1' else
		      "000000001100" when mode="001" and Nblank='1' else
--		      "111111110000" when mode="010" and Nblank='1' else
--		      "000011111111" when mode="011" and Nblank='1' else
		      "100000001000" when mode="011" and Nblank='1' else
		      "000011110000" when mode="111" and Nblank='1' else
		      "111100001111" when mode="110" and Nblank='1' else
		      "011001100110" when mode="010" and Nblank='1' else
		      "000000000000";
--       G <=   "1111" when  Nblank='1' and x_in>=X_start1 and x_in< X_end1 and y_in>=y_start1 and y_in<y_end1 and originrom(TO_INTEGER(unsigned(y_in-Y_start1)))(TO_INTEGER(unsigned(x_in-x_start1)))='1' else
--		      -- "111111111111" when mode="01" and Nblank='1' and x_in>=X_start2 and x_in< X_end2 and y_in>=y_start2 and y_in<y_end2 and blackrom(TO_INTEGER(unsigned(y_in-Y_start2)))(TO_INTEGER(unsigned(x_in-x_start2)))='1' else
--		       din(7 downto 4)  when Nblank='1' and x_in>=X_left and x_in<=X_right and y_in>=y_up  else 
--		      "0110" when Nblank='1' else
--		      "0000";
--	   B <=    "1111" when  Nblank='1' and x_in>=X_start1 and x_in< X_end1 and y_in>=y_start1 and y_in<y_end1 and originrom(TO_INTEGER(unsigned(y_in-Y_start1)))(TO_INTEGER(unsigned(x_in-x_start1)))='1' else
--		      -- "111111111111" when mode="01" and Nblank='1' and x_in>=X_start2 and x_in< X_end2 and y_in>=y_start2 and y_in<y_end2 and blackrom(TO_INTEGER(unsigned(y_in-Y_start2)))(TO_INTEGER(unsigned(x_in-x_start2)))='1' else
--		       din(3 downto 0)  when Nblank='1' and x_in>=X_left and x_in<=X_right and y_in>=y_up  else 
--		      "0010" when Nblank='1' else
--		      "0000";  
		

end Behavioral;

